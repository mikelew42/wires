test42 as a stand-alone test runner:
 - route42
 - view42
 - page42
 - framework42?
 - lew42?

Can we have cyclical dependencies?
lew42 is a package, that includes test42
test42 includes lew42

I'm not sure how that'd work... 

test42 would try to require("lew42"), and lew42 would try to require("test42"), which wasn't finished yet...

Don't do that, just require only what's necessary.  It can be similar to the framework, but not the whole thing.


test42 could require lew42-view1, lew42-view2, etc...

Or, just use versions?
How does npm 


Ok, wow...
git has tags:  quick easy read: https://git-scm.com/book/en/v2/Git-Basics-Tagging
Basically, a tag is just a bookmark.

npm is integrated well with git..
npm mikelew42/wires worked just fine, and stores it in package.json just fine

So, I have many options to try and organize the npm/git repos..


Here's how I could back into strategically named versions:

Let's say I want 

view42  v1, v2, v3, v4, ... latest
and want people to be able to install any of the versions

But, I want to be able to update the versions.

Ideally, I could create a v0.0.1, 0.0.2... 0.1.0.. until I get to 1.0.0
Once a version is released on npm, it probably shouldn't be updated...

What if I used v1, v2, v3 as the changing "branches" of a repo...
v0.x.y --> v1?
or v1.0.1, 1.0.2.. 1.1.1, 1.8.1, 1.9.1... Probably keep it as low as possible...
1.0.1, 1.0.2, 1.0.22?  --> v1 
That means that 1.0.x is a "higher number" than "v1".  A little unintuitive.

But, I don't like the idea that I can't keep a specific branch..
Maybe I just need to have view41, view42, view43...?


Also, these incremental versions are partly for learning's sake.
I can't switch between versions using npm, the way I can with git.

If you want to learn how it works, you should clone the test42-tutorial repo, and checkout each successive branch, in order to see the progression.  That's the place to store all the versions...

It doesn't make much sense to publish a half-assed version that's subpar...  If there's a need to be able to quickly npm install it, then fine, publish.  But if not...

Also, you can always npm install lew42/whatever



var test = require("test42");