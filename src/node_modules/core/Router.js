var Mod1 = require("mod42/Mod1");
var Mod2 = require("mod42/Mod2");
var Route = require("./Route");
var History = require("history").createBrowserHistory;

var $ = require("jquery");

var logger = require("log42");
var log = logger();

var View = require("View");
var Expandable = require("Expandable");
var Item = require("Item");

log.groupc("Router.js");

var Router = module.exports = Mod2.extend({
	Route: Route,
	name: "Router",
	init: function(){
		this.routes = this.routes || [];
		this.history = History();
		var router = this;
		this.history.listen(function(location, action){
			console.trace();
			console.group("this.history.listen");
			console.log("location", location);
			console.log("action", action);
			router.matchCurrentRoute();
			console.groupEnd();
		});


		var router = this;
		this.view = Expandable({
			addClass: "router light",
			preview: function(){
				this.item = Item({
					css: {
						fontSize: "1em",
						fontWeight: "bold"
					},
					icon: "code-fork",
					label: router.name
				});
			},
			contents: {
				css: {
					paddingLeft: "1em"
				},
				content: function(){
					this.routes = Expandable({
						name: "routes",
						addClass: "routes",
						preview: function(){
							Item({
								icon: "plane",
								label: "routes"
							})
						}
					})
				}
			}
		}).appendTo("body");

		this.render_nav();
	},
	render_nav: function(){
		var router = this;

		$(function(){
			router.log.groupc("render_nav");
			if (!router.$nav)
				router.$nav = $("<div>").addClass("nav").prependTo("#docroot");

			router.$nav.empty();

			for (var i = 0; i < router.routes.length; i++){
				router.routes[i].link().appendTo(router.$nav);
			}
			router.log.end();
		});
	},
	each: function(fn){
		for (var i = 0; i < this.routes.length; i++){
			fn.call(this, this.routes[i], i);
		}
		return this;
	},
	matchCurrentRoute: function(){
		// this.log && console.group("matching route ...");
		var matches = [], match;
		if (!this.matched){
			this.each(function(route){
				if (route.matchBeginning){
					if (window.location.pathname.indexOf(route.pathname) === 0){
						this.log("matches.push", route);
						matches.push(route);
					}
				} else if (route.pathname === window.location.pathname){
					this.log("exact match", route);
					route.runCBs();
					this.matched = true;
				}
			});

			if (this.matched)
				return false; // keep an exact match if found

			// otherwise, use the longest path match
			else if (matches.length){
				match = matches[0];
				for (var i = 1; i < matches.length; i++){
					if (matches[i].length > match.length)
						match = matches[i];
				}
				match.runCBs();
				this.matched = true;
			}

			
		}
		// this.log && console.groupEnd();
	},
	addRoutes: function(){
		for (var i = 0; i < arguments.length; i++){
			this.addRoute(arguments[i]);
		}
		this.matchCurrentRoute();
		return this;
	},
	addRoute: function(route){
		this.log(route.pathname);
		route.router = this;
		this.routes.push(route);
		this.view.contents.routes.contents.append(route.view.$el);
		return this;
	},
	deactivateAll: function(){
		for (var i = 0; i < this.routes.length; i++){
			this.routes[i].deactivate();
		}
	},
	pushRoute: function(route){
		this.history.push(route.pathname);
		return this;
	}
});

Router.Route = Route;

log.end();

/*
Maybe:

router.addRoutes({
	routeName: {
		pathname,
		label,
		then: fn(){}
	},
	anotherRouteName: {
	
	}
});

then

router.routeName.then(cb)
router.routeName.activate(), etc...?

The Router could also accept a page property.  The page would be transitioned in.  You'd need the router to specify a root container...
*/