var is = require("is");
var Mod3 = require("mod42/Mod3");

var Test = module.exports = Mod3.extend({
	name: "Test",
	root: true,
	methods: {
		instantiate: {
			expand: true
		}
	},
	set: {
		other: function(test, arg){
			if (is.fn(arg))
				test.fn = arg;
			else if (is.str(arg))
				test.name = arg;
			else
				console.warn("not sure how to set: ", arg);
		}
	},
	init: function(){
		this.getCaptured();
		if (this.autoExec !== false)
			this.exec();
	},
	getCaptured: function(){
		if (Test.captor)
			Test.captor.add(this);
	},
	add: function(test){
		test.parent = this;
		this.prevent(test);
		this.tests.push(test);
	},
	// if the route doesn't match, skip it
	prevent: function(child){
		if (this.next && child.name !== this.next){
			child.autoExec = false;
		}
	},
	exec: function(){
		this.becomeCaptor();
		console.group(this.name);
		this.fn();
		console.groupEnd();
		this.restoreCaptor();
	},
	becomeCaptor: function(){
		this.previousCaptor = Test.captor;
		Test.captor = this;
	},
	restoreCaptor: function(){
		Test.captor = this.previousCaptor;
	},
	error: function(a){
		console.error(a);
	}
}).assign({
	assert: function(value){
		if (!is.bool(value))
			console.warn("you shouldn't assert values... use 'is' to check it out");

		// this.captor === current test block
		// use this for reporting.
	}
});
// console.log(Test.prototype.set.mfn.wrapMethod);
// console.log(Test.prototype.log)
// console.log(Test.prototype.log.value);