var Mod1 = require("mod42/Mod1");
var Mod2 = require("mod42/Mod2");
var Mod3 = require("mod42/Mod3");
var is = require("is");

// var RouteView = require("./RouteView");

var logger = require("log42");
var log = logger();

var Route = module.exports = Mod3.extend({
	name: "Route",
	log: true,
	set: {
		other: function(route, value){
			route.name = value;
		}
	},
	init: function(){
		this.cbs = [];
		this.dcbs = [];
		this.routes = [];

		this.makeFullPath();
	},
	makeFullPath: function(){
		var pathParts = [this.name];
		var parent = this.parent;

		while(parent){
			pathParts.unshift(parent.name);
			parent = parent.parent;
		}

		this.path = "/" + pathParts.join("/") + "/";
		return this.path;
	},
	// remaining parts
	match: function(parts){
		if (parts[0] === this.name){
			return this.matched(parts.slice(1));
		} else {
			return false;
		}
	},
	matched: function(remaining){
		var match;
		if (remaining.length){
			for (var i = 0; i < this.routes.length; i++){
				match = this.routes[i].match(remaining);
				if (match)
					return match;
			}	
		}
		return this;
	},
	activate: function(){
		if (!this.active){
			this.log("not currently active");
			// deactivate current
			if (this.router.active){
				this.log("deactivate the active route");
				this.router.active.deactivate();
			}

			this.active = true;
			this.router.active = this;

			if (window.location.pathname !== this.path){
				this.log("path mismatch, history.push(", this.path, ")");
				this.router.history.push(this.path);
			}

			this.exec();
			
		} else {
			this.log("already active");
		}
	},
	exec: function(){
		for (var i = 0; i < this.cbs.length; i++){
			this.cbs[i].call(this);
		}
	},
	deactivate: function(){
		if (this.active){
			this.active = false;
			this.dexec();
		} else {
			console.warn("oops");
		}
	},
	dexec: function(){
		for (var i = 0; i < this.dcbs.length; i++){
			this.dcbs[i].call(this);
		}
	},
	setup: function(parent){
		this.parent = parent;
		this.router = parent.router;
		this.makeFullPath();
	},
	add: function(route){
		if (!(route instanceof Route)){
			route = Route(route);
		}

		route.setup(this);
		this.routes.push(route);

		if (!this[route.name]){
			this[route.name] = route;
		}

		return route;
	},
	then: function(cb){
		this.cbs.push(cb);
		return this;
	},
	andThen: function(dcb){
		this.dcbs.push(dcb);
		return this;
	}
});