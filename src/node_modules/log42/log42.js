var Base3 = require("Base3");
var is = require("is");

var Logger = Base3.extend({
	name: "Logger",
	get_logger: function(){
		// build a logger or noop logger, depending on input
		return log;
	}
});

module.exports = function(){
	var logger = Logger.apply(null, arguments);
	return logger.get_logger();
};

module.exports = function(){
	var Loggr = Logger.extend.apply(Logger, arguments);
	var logger = Loggr();
	var log = logger.get_logger();
	log.logger === logger;
	log.Logger === Loggr;

	log.setup(parent, name){
		if (!parent.hasOwnProperty(name)) // I don't see how it could, when run immediately upon .create.  But, if setup is reused later?  But, that would be for a new instance...
			parent[name] = parent[name].clone();
		log.parent = parent;
	}

	log.clone(newParent){

	}
};


var Mod = Module.extend({
	log: logger()
});
// --> log needs "this"...
// --> we need a Mod.setup?
// we could use something like that .setup system... 
inst: function(){
	for (var i in this)
		if (this[i].setup)
			this[i].setup(this, i);
}


var log = Logger().log;
log === console.log.bind(console);
log.log = console.log.bind(console);
log.consoleMethods = console.consoleMethods.bind(console);
log.method({opts});
log.on(); // --> swaps them back
log.off(); // --> swaps out all methods to noop;

log.methods.set;
	// auto extend, use default log.Method if it doesn't exist