var utils = require("utils");
var is = utils.is;
var Base3 = require("Base3");

var global_app_module = require("app");
var registered_global_module = false;

var Page = require("Page/Page2");
var Router = require("core/Router");
var View = require("View");
var Logged = require("Logged");

var $ = require("jquery");

var App = Logged.extend({
	Logger: {
		methods: {
			init: { expand: true },
			init_app: { expand: true },
			init_modules: { expand: true },
			register_global_module: { expand: true },
			init_router: { expand: true },
			load_pages: { expand: true },
			load_tests: { expand: true },
			require_all: { argLabel: "req_ctx" },
			test_routes: { argLabel: "req_ctx" }
		}
	},
	name: "App",
	Router: Router,
	Page: Page,
	View: View,
	// Test: Test,
	inst: function(){
		// noop, to prevent Page and View from being auto_sub'd
		// this seems like a unique case - when we're storing a Class, and don't want to flip its auto_sub switch to off (so that it will auto-sub from now on...)
	},
	init: function(){
		this.init_app();
	},
	init_app: function(){
		this.init_modules();
		this.register_global_module();
		this.init_router();
		this.load_pages();
		this.load_tests();
	},
	init_modules: function(){
		this.Router = this.Router.extend({
			name: "AppRouter",
			app: this
		});

		this.Page = this.Page.extend({
			app: this
		});
	},
	init_router: function(){
		this.router = this.Router({
			app: this
		});
		
		this.router.render_nav();
	},
	register_global_module: function(){
		if (!registered_global_module){
			global_app_module.exports = this;
			registered_global_module = true;
		}
	},
	load_pages: function(){
		// this has to be done from within the site?
		var pages = require.context("../", true, /\.page\.js$/);
		this.require_all(pages);
	},
	require_all: function(req_ctx){
		req_ctx.keys().forEach(req_ctx);
	}
});

module.exports = App;