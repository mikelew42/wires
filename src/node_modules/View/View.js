var Base3 = require("../Base3/Base3");
// var Logged = require("../Base/Logged");
var track = require("../track/track");
var is = require("../is");
var $ = require("jquery");

var Set = require("../Base3/Set");

var View = module.exports = Base3.extend({
	name: "View",
	tag: "div",
	capturable: true,
	active: true,
	setup: function(parent){
		// run this when captured?
	},
	set: {
		other: function(view, val){
			view.content = val;
			view.active = true; 
		}
	},
	create: function(o){
		track(this);
		this.inst_el(this.constructor.prototype.$el, o);
		this.inst && this.inst(); // setup sub instances before .set
		this.set.apply(this, arguments);
		this.init && this.init();
	},
	inst_el: function($base_el, o){
		if (o && o.tag)
			this.tag = o.tag;
		// maybe this can just do .attr($base.attr()) ?? 
			// then, view({ attr: [ "data-something", "value" ] }) could be used, and inherited properly
		this.$el = $("<" + this.tag + ">").addClass($base_el.attr("class")).attr("style", $base_el.attr("style"));
	},
	init: function(){
		this.init_view();
	},
	init_view: function(){
		this.children = [];
		
		if (this.autoRender !== false)
			this.render();

		if (this.autoInsert !== false)
			this.insert();
	},
	insertMethod: "append",
	insert: function(){
		if (this.$container) // $container could be a view with aliased insertMethod
			this.$container[this.insertMethod](this.$el);
	},
	render: function(){
		// this.render_el();
		if (this.active){
			this.get_captured(); // get captured by captor
			if (!this.rendered){
				this.render_content();
				this.rendered = true;
			}
		}
		return this;
	},
	render_el: function(){
		this.$el = $("<" + this.tag + ">").addClass(this.classes);
	},
	get_captured: function(){
		if (this.capturable && View.captor){
			this.active = true;
			View.captor.add(this);
		}
	},
	add_content: function(child){
		this.children.push(child);
		if (!this[child.name])
			this[child.name] = child;
		if (child.setup)
			child.setup(parent);
		child.$el.appendTo(this.$el);
	},
	// this.capture(this.content);
	capture: function(methodName){
		var previousAdd = this.add;
		this.add = this["add_"+methodName];
		this.become_captor();
		this[methodName]();
		this.restore_captor();
		this.add = previousAdd;
	},
	render_content: function(){
		if (!is.def(this.content))
			return false;
		if (is.fn(this.content))
			this.capture("content");
		else if (is.str(this.content))
			this.$el.append(this.content).addClass("str-content");
		else if (is.num(this.content))
			this.$el.append(this.content).addClass("num-content");
		else if (is.bool(this.content))
			this.$el.append(this.content.toString()).addClass("bool-content");
		else
			console.error("not supported");
	},
	// capture: function(fn){ // how to capture the created views into a secondary.. $el, or array, or..?
	// 	var returned;
	// 	this.become_captor();
	// 	returned = fn.call(this);
	// 	this.restore_captor();
	// },
	capture_content: function(){
		var content;
		this.become_captor();
		content = this.content(); // allow return values from content function
		if (content){
			if (is.str(content))
				this.$el.append(content)
			else
				console.error("not yet supported");
			// how do we handle str, DOM, View, function?, Value/Property binding, etc..
		}
		this.restore_captor();
	},
	become_captor: function(){
		this.previous_captor = View.captor;
		View.captor = this;
	},
	restore_captor: function(){
		View.captor = this.previous_captor;
	},
	filler: function(quantity){
		this.attr("data-lorem", quantity);
	}
}).assign({
	Extend: Base3.Extend.extend({
		instantiatePrototype: function(NewView, OldView){
			NewView.prototype.inst_el(OldView.prototype.$el);
		}
	}),
	create_sub: function(parent, name){
		name = name[0].toLowerCase() + name.substring(1);
		var view = parent[name] = new this({
			name: name,
			parent: parent,
			autoRender: false
		});

		// why set parent twice?
			// for convenience, when considering 2 use cases:
			// 1. no setup, just use .parent ref manually
			// 2. use .setup after init, and must pass in parent
		if (view.setup)
			view.setup(parent);
	}
});

View.prototype.inst_el({ attr: function(){} });

View.extend = new View.Extend().fn;

var aliasFnToEl = function(fn){
	return function(){
		this.$el[fn].apply(this.$el, arguments);
		return this;
	};
};

[	'append', 'prepend', 'click', /* 'clickOff',*/ 'show', 'hide', 'appendTo', 'prependTo', 'addClass', 'removeClass', 
	'css', 'attr', 'remove', 'empty', 'hasClass', 'html', "text"].forEach(function(v){
		View.prototype[v] = aliasFnToEl(v);
});

View.AutoSub = View.extend({
	// autoRender: false
}).assign({
	auto_sub: true
});

["p", "h1", "h2", "h3"].forEach(function(v){
	View[v] = View.extend({
		name: v,
		tag: v
	});
});

[
	{ // View.Row = View.extend({ name: "Row", addClass: "row" })
		name: "Row",
		addClass: "row",
	},
	{
		name: "Col",
		addClass: "col"
	}
].forEach(function(v){
	View[v.name] = View.extend(v);
});

View.Col50 = View.Col.extend({
	name: "Col50",
	addClass: "col-50"
});

View.Col33 = View.Col.extend({
	name: "Col33",
	addClass: "col-33"
});

View.Col66 = View.Col.extend({
	name: "Col66",
	addClass: "col-66"
});