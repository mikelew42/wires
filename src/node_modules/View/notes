View.AutoSub --> Use this to be more explicit regarding the auto_sub feature.

View.extend({
	MyAutoSubView: View.AutoSub.extend({}),
	MySubView: View.extend(),
	content: function(){
		this.myAutoSubView.render(); // automatically created
		this.named = this.MySubView(); // create instance
			// this is a little quicker/easier/more intuitive, but when it comes to modifying classes, the auto_sub is easier, because you don't have to override methods and copy+paste
	}
});

If you just need a subview... 

Rather than have to manually extend from View.AutoSub, could we make a method to do it?

View.extend({});

View("append", "all", "of", "these");


View.extend("append") ??
The $el, while present, doesn't copy any contents...

Maybe we append everything to a .contents[] array?
There shouldn't be a .content and .contents[] api...

Maybe when we append several values like that, they just get appended to .content[] array...

But then we need to handle content as:

viewable
	str
	bool
	num
	function: capture
	function: return
	view
	DOM
	jQuery
	mod w/ .render()
		treats the fn as either a capture fn, and/or a return fn

mod.render()
	returns function(){}
		returns function(){}
			--> keeps capturing/looking for returned value to use as rendered content

.render() can return any viewable value

if .render() returns something with .render(), or a fn, we need to call it, and see what happens...



