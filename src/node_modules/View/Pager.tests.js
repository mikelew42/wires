var TestFramework = require("../test/framework");
var test = TestFramework.test;
var assert = console.assert.bind(console);
var is = require("../is");
var $ = require("jquery");
var View = require("./View");
var Div = require("./Div");

// require("./even-more.less");

var logger = require("log42");
var log = logger();

var xtest = function(){};

$(function(){

var Page = View.extend({
	name: "Page",
	addClass: "page",
	css: {
		marginBottom: "1em",
		background: "rgba(0,0,0,0.1)"
	},
	size: 0,
	depth: 1,
	inst: function(){
		this.pages = [];
	},
	content: function(){
		var page = this;
		View({
			tag: "h3",
			content: this.name
		});

		View(function(){
			this.filler("3s");
		});

		if (this.size && this.depth > 0){
			View({
				css: {
					padding: "10px"
				},
				content: function(){
					for (var i = 1; i <= page.size; i++){
						Page({
							name: page.name + "-" + i,
							size: page.size,
							depth: page.depth - 1
						})
					}
				}
			})
		}
	},
	out: function(){
		this.removeClass("in").addClass("out").hide();
	},
	in: function(){
		this.addClass("in").removeClass("out").show();
	},
	button: function(){
		var page = this;
		View(function(){
			this.append(page.name);
			this.css({
				padding: "6px 12px",
				cursor: "pointer"
			});
			this.click(function(){
				page.activate();
			})
		})
	},
	activate: function(){
		this.pager.to(this);
	},
	set_pager: function(pager){
		this.pager = pager;
	},
	addPage: function(page){
		if (!(page instanceof Page)){
			page = Page(page);
		}

		this.pages.push(page);
		page.set_pager(this.pager);
		return page;
	},
	make: function(number, depth){
		var name, page;
		for (var i = 1; i < number; i++){
			name = "";
			if (this.parent)
				name = this.parent.name + "-";
			name += i;
			page = this.addPage({
				name: name,
				parent: this
			});

			if (depth)
				page.make(number, depth - 1);
		}
	}
});


var Pager = View.AutoSub.extend({
	name: "Pager",
	addClass: "pager",
	autoRender: false,
	inst: function(){
		this.pages = [];
	},
	addPages: function(){
		for (var i = 0; i < arguments.length; i++){
			this.addPage(arguments[i]);
		}
	},
	addPage: function(page){
		if (!(page instanceof Page)){
			page = Page(page);
		}

		if (this.pages.length)
			page.hide();
		else
			this.activePage = page;

		this.pages.push(page);
		page.set_pager(this);

		if (page.name && !this[page.name])
			this[page.name] = page;
	},
	to: function(page){
		this.activePage && this.activePage.out(); // .then
		page.in();
		this.activePage = page;
	},
	buttons: function(){
		var pager = this;
		View(function(){
			this.css({
				minWidth: "250px"
			})
			for (var i = 0; i < pager.pages.length; i++){
				pager.pages[i].button();
			}
			
		});
	},
	make: function(size, depth){
		for (var i = 1; i <= number; i++){
			this.addPage({
				name: "page" + i
			});
		}
	}
});

test("Page", function(){
	Page({
		name: "testPage",
		size: 3,
		depth: 5
	});
});
});