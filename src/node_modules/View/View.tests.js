var TestFramework = require("../test/framework");
var test = TestFramework.test;
var assert = console.assert.bind(console);
var is = require("../is");
var $ = require("jquery");
var View = require("./View");
var Div = require("./Div");

var xtest = function(){};

$(function(){

test("Div", function(){
	
	xtest("usage", function(){
		Div("hello world");

		Div("hello", function(){
			Div("con", "tent");
			Div("content");
			Div("content").css("color", "blue");
			Div(function(){
				this.css("padding", "10px");
				this.append("one");
				this.append("two");
				Div("test?");
			});
		});
	});

	test("just content", function(){
		Div("hello world"); 
	});

	test("classes and content", function(){
		Div("my_section", function(){
			this.append(this.name);
		});
	});

	test("extend", function(){
		// var Something = Div.extend();
		test("simple", function(){
			var Div2 = Div.extend("default content");
			Div2();
		});

		test("simple2", function(){
			var Div2 = Div.extend("nameClass class2", function(){
				this.append("hello world");
			});
			Div2();
		});

		test("standard extenders", function(){
			var Div2 = Div.extend({
				active: true,
				addClass: "huh",
				css: {
					padding: "4px 8px",
					background: "#eee",
					margin: "0 0 3px"
				},
				Sub1: Div.extend({
					addClass: "sub1",
					css: ["font-weight", "bold"]
				}),
				Sub2: Div.extend({ addClass: "sub2" }),
				content: function(){
					this.append("huh?");
					this.Sub1(); // no content --> no show
					this.Sub2("content");
				}
			});

			Div2();

			var Div3 = Div2.extend({
				removeClass: "huh",
				addClass: "nuuuh",
				Sub1: "new content",
				Sub2: {
					css: {
						fontWeight: "bold",
						color: "purple"
					}
				}
			});

			Div3();
		});

		test("messing around", function(){
			var WithContent = Div.extend("withContent class2", function(){
				Div("hello world");
			});
			var withContent = WithContent(function(){
				this.constructor.prototype.content();
				this.append("yo");
				Div("cruel world");
				this.append("diggity");
			});
		});
	});

	test("triforce", function(){
		View("content").css("color", "blue");

		View({
			css: ["color", "purple"],
			content: "content"
		});

		View(function(){
			this.append("content").css("color", "red");
		});
	});

	test("Items and shit", function(){
		this.$el.addClass("wires");

		var Flex = View.extend({
			css: {
				display: "flex",
				marginBottom: "1em"
			}
		});

		Flex({
			content: function(){
				this.left = View("left");
				this.right = View({
					css: {
						marginLeft: "auto"
					},
					content: "right"
				});
			}
		});


		Flex({
			content: function(){
				this.left = View(function(){
					this.css("flex-grow", "1");
					this.text("flex-grow: 1")
				});
				this.right = View(function(){
					this.css("margin-left", "auto");
					this.text("margin-left: auto");
				});
			}
		});

		Flex({
			content: function(){
				this.left = View(function(){
					// this.css("flex-grow", "1");
					this.text("none")
				});
				this.right = View(function(){
					// this.css("margin-left", "auto");
					this.css("flex-grow", "1");
					this.text("flex-grow: 1");
				});
			}
		});

		var Panel = View.extend({
			addClass: "panel",
			autoRender: false,
			capturable: false,
			content: function(){
				this.text(this.name);
			},
			out: function(){
				this.hide();
			},
			in: function(){
				this.show();
			}
		});

		var DeepPanel = Panel.extend({
			content: function(){
				this.text(this.name);

				Cols();
			}
		});

		var List = View.extend({
			addClass: "list",
			make: function(n){
				// console.log(this.cols);
				this.items = this.items || [];
				var _Panel = this.Panel || Panel;
				for (var i = 0; i < n; i++){
					this.items.push(ListItem({
						name: i+1,
						cols: this.cols,
						panel: _Panel({
							name: "panel" + (i+1)
						})
					}));
				}
			},
			content: function(){
				// console.log(this.cols);
				this.addClass("list")
					// .css("min-width", "200px");
				this.items.forEach(function(v, i){
					if (i === 0){
						$(function(){// delay, because cols.right hasn't rendered yet
							v.launch();
						});
					}
					v.render();
				});
			}
		});

		var ListItem = View.extend({
			autoRender: false,
			content: function(){
				var item = this;
				this.css("display", "flex").addClass("list-item");
				this.left = View(this.name).css("margin-right", "10px");
				this.right = View(function(){
					this.css("margin-left", "auto")
						.css("cursor", "pointer")
						.append(">")
						.click(item.launch.bind(item));
				});
			},
			launch: function(){
				this.panel.render().appendTo(this.cols.right.$el);
				this.cols.to(this.panel);
			}
		});

		var Cols = Flex.extend({
			name: "Cols",
			Panel: Panel,
			content: function(){
				var cols = this;
				this.addClass("cols flex");
				this.left = View(function(){
					this.addClass("left");
					// this.css("flex-grow", "1");
					List({
						// Panel: DeepPanel, // order matters here, again
						Panel: cols.Panel,
						cols: cols, // order here matters :()
						make: 5,
					})
				});
				this.right = View(function(){
					// this.css("margin-left", "auto");
					this.css("flex-grow", "1");
					// this.text("flex-grow: 1");
				});
			},
			to: function(panel){
				this.current && this.current.out();
				this.current = panel;
				this.current.in();
			}
		});

		Cols({
			Panel: DeepPanel
		});

	});

});

});