var TestFramework = require("../test/framework");
var test = TestFramework.test;
var assert = console.assert.bind(console);
var is = require("../is");
var $ = require("jquery");
var View = require("./View");
var Div = require("./Div");

require("./even-more.less");

var logger = require("log42");
var log = logger();

var xtest = function(){};

$(function(){

var FlexContainer = View.AutoSub.extend({
	addClass: "flex-container wires",
	Left: View.AutoSub.extend({
		addClass: "left",
		content: function(){
			this.text("left" + this.parent.id);
		}
	}),
	Right: View.AutoSub.extend({
		addClass: "right",
		content: function(){
			this.text("right" + this.parent.id);
		}
	}),
	content: function(){
		this.left.render();
		this.right.render();
	}
});

test("FlexContainer", function(){
	FlexContainer({
		right: function(){
			FlexContainer();
		}
	});
});

test("Pager", function(){

var Page = View.extend({
	name: "Page",
	addClass: "page",
	css: {
		background: "#ddd",
		padding: "6px 12px",
		minWidth: "350px"
	},
	init: function(){
		this.target = this.target || this.pager;
	},
	set_pager: function(pager){
		if (pager === window)
			debugger;
		this.pager = pager;
		if (!this.target)
			this.target = this.pager;

		this.appendTo(this.target.$el);
	},
	set_target: function(target){
		this.target = target;
		this.appendTo(this.target.$el);
	},
	content: function(){
		this.filler("2s");
	},
	out: function(){
		this.removeClass("in").addClass("out").hide();
	},
	in: function(){
		this.removeClass("out").addClass("in").show();
	},
	button: function(){
		var page = this;
		View({
			content: function(){
				this.append(page.pager.name + " " + page.name).css({
					padding: "8px 13px",
					cursor: "pointer"
				});
				this.click(function(){
					page.target.to(page);
				});
			}
		})
	}
});

var Pager = View.AutoSub.extend({
	name: "Pager",
	addClass: "pager",
	autoRender: false,
	inst: function(){
		this.pages = [];
	},
	addPages: function(){
		for (var i = 0; i < arguments.length; i++){
			this.addPage(arguments[i]);
		}
	},
	addPage: function(page){
		if (!(page instanceof Page)){
			page = Page(page);
		}

		if (this.pages.length)
			page.hide();
		else
			this.activePage = page;

		this.pages.push(page);
		page.set_pager(this);

		if (page.name && !this[page.name])
			this[page.name] = page;
	},
	to: function(page){
		this.activePage && this.activePage.out(); // .then
		page.in();
		this.activePage = page;
	},
	buttons: function(){
		var pager = this;
		View(function(){
			this.css({
				minWidth: "250px"
			})
			for (var i = 0; i < pager.pages.length; i++){
				pager.pages[i].button();
			}
			
		});
	},
	make: function(number){
		for (var i = 1; i <= number; i++){
			this.addPage({
				name: "page" + i
			});
		}
	},
	addSubPagerContainer: function(depth){
		var pager = this;
		this.addPage(function(){
			var sub_pager = Pager({
				name: pager.name + "_subpager",
				make: 4
			});

			if (depth){
				console.log(depth);
				sub_pager.addSubPagerContainer(depth - 1);
			}

			FlexContainer({
				name: pager.name + "_subflexcontainer",
				left: function(){
					sub_pager.buttons();
				},
				right: function(){
					sub_pager.render();
				}
			});
			
		})
	}
});

var pager1 = Pager({
	name: "pager1",
	make: 3
});

pager1.addSubPagerContainer(3);

FlexContainer({
	name: "pagerContainer",
	css: {
		overflowX: "scroll"
	},
	left: function(){
		pager1.buttons();
	},
	right: function(){
		pager1.render();
	}
});

var PagerContainer = FlexContainer.extend({

});

var Flex = FlexContainer.extend({
	Left: Pager.extend({
		addClass: "left"
	}),
	Right: Pager.extend({
		active: false
	}),
	content: function(){
		this.left.render();
		if (this.right.active)
			this.right.render();
	}
});

var flex1 = Flex({
	left: "flex1 - left"
});

var flex2 = Flex({
	left: "flex2 - left",
	right: "flex2 - right"
});

var flex3 = Flex({
	left: function(){
		var flex = this.parent;
		this.button = View({
			tag: "button",
			content: "show"
		}).click(function(){
			flex.right.show();
		});

		this.addPage({
			name: "target_self",
			autoRender: false,
			content: function(){
				this.append("first page..");
				flex.left.buttons();
			}
		});

		this.addPage({
			name: "target_right",
			target: flex.right,
			content: "target_right"
		});

		this.addPage({
			name: "target_self2",
			content: "target_self2"
		})

		this.target_self.render();
	},
	right: function(){
		// this.hide();
		this.filler("4s");
		this.parent.left.target_right.set_target(this);
	},
	rendered: function(){
		this.left.target_right.set_target(this.right);
	}
});

});

});