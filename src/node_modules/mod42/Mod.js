var Base = require("base42");
var track = require("track");
var Set = require("set42");
var ExtendModFn2 = require("ExtendModFn/ExtendModFn2");
var isExtensionOf = require("Base/isExtensionOf");

var instantiate = function(o){
	this.set.apply(this, arguments);
	this.initialize.apply(this, arguments);
};

var Extend = ExtendModFn2.extend({
	name: "ModExtend",
	createConstructor: function(name, Base){
		return Base.create_constructor(name);
	},
	setupConstructor: function(Ext, Base){
		Ext.assign(Base);
		Ext.base = Base;
		Ext.prototype.proto = Object.create(Ext.prototype);
		Ext.prototype.base = Object.create(Base.prototype);
	}
});

var Mod = Base.extend({
	name: "Mod",
	instantiate: function(){
		this.set.apply(this, arguments);
		this.initialize.apply(this, arguments);
	},
	set: new Set({ name: "set" }).fn,
	initialize: function(){
		this.init();
	},
	init: function(){}
});

Mod.assign({
	Extend: Extend,
	extend: new Extend({ name: "extend" }).fn,
	isExtensionOf: isExtensionOf,
	setup: function(parent, name){
		if (this.auto_sub)
			this.create_sub(parent, name);
	},
	set: new Set({ name: "set" }).fn,
	auto_sub: false,
	create_sub: function(parent, name){
		name = name[0].toLowerCase() + name.substring(1);
		var mod = parent[name] = new this({
			name: name,
			parent: parent
		});

		if (mod.setup)
			mod.setup(parent);
	}
});

Mod.prototype.assign({
	instantiate: instantiate,
	set: new Set({ name: "set" }).fn,
	initialize: function(){
		this.init && this.init();
	},
	setup_props: function(){
		for (var i in this){
			if (this[i].setup)
				this[i].setup(this, i);
		}
	}
});

module.exports = Mod;