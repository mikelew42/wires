var Mod2 = require("mod42/Mod2");
var is = require("is");
var track = require("track");
var log = require("log42/logger")();
log.groupc("Mfn2.js");

var Mfn2 = Mod2.extend({
	name: "Mfn2",
	init: function(){
		var self = this;
		this.name = this.constructor.name[0].toLowerCase() + this.constructor.name.substring(1);
		this.fn = function(){
			var last, restore;
			if (this.log){
				restore = true;
				last = self.log.enabled;
				self.log = this.log.enabled;
			}
			var ret = self.main.apply(self, [this].concat([].slice.call(arguments)));
			if (restore){
				self.log = last;
			}
			return ret;
		};
		this.fn.mfn = this;
		this.fn.set = function(o){
			// can we use Object.create instead?
			var clone = Object.create(this.mfn);
			track(clone);
			clone.instantiate(o);
			return clone.fn;
			// var NewMfn = this.mfn.constructor.extend.call(this.mfn.constructor, {name: this.mfn.constructor.name}, o);
			// return new NewMfn().fn;
		};
		this.clone = function(o){
			var clone = Object.create(this.mfn);
			track(clone);
			clone.instantiate(o);
			return clone.fn;
		};
	},
	main: function(ctx){}
}).assign({
	make: function(){
		var NewMfn = this.extend.apply(this, [{name: this.name}].concat( [].slice.call(arguments)) );
		return NewMfn().fn;
	}
});
module.exports = Mfn2;
log.end();
/*
Use Object.create to "clone" the mfn instance, without making a new constructor.

I think that works, as long as we re-initialize, to create own .fn
*/