var Mod4 = require("mod42/Mod4");
var is = require("is");

var Mfn2 = Mod4.extend({
	name: "Mfn2",
	init: function(){
		var self = this;
		this.name = this.constructor.name[0].toLowerCase() + this.constructor.name.substring(1);
		this.fn = function(){
			return self.main.apply(self, [this].concat([].slice.call(arguments)));
		};
		this.fn.mfn = this;
		this.fn.set = function(o){
			// can we use Object.create instead?
			var NewMfn = this.mfn.constructor.extend.call(this.mfn.constructor, {name: this.mfn.constructor.name}, o);
			return new NewMfn().fn;
		};
	},
	main: function(ctx){}
}).assign({
	make: function(){
		var NewMfn = this.extend.apply(this, [{name: this.name}].concat( [].slice.call(arguments)) );
		return NewMfn().fn;
	}
});

module.exports = Mfn2;
/*
Use Object.create to "clone" the mfn instance, without making a new constructor.

I think that works, as long as we re-initialize, to create own .fn
*/