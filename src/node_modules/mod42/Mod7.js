var Base = require("base42");
var SetMfn2 = require("./SetMfn2");
var ExtendMfn2 = require("./ExtendMfn2");
var Mod4 = require("./Mod4");
var logger = require("log42/logger");
var is = require("is");

var Method = require("log42/Method");
var Property = require("Property");

var log = logger();

log.group("Mod7.js");

var set = SetMfn2.make({
	obj: function(mod, obj){
		for (var i in obj){
			if (i === "log")
				install_logger(mod, obj[i])
			else
				this.prop(mod, obj, i);
		}
	},
	stdProp: function(mod, obj, i){
		if (is.fn(obj[i]) && !is.Class(obj[i]))
			this.wrapMethod(mod, i, obj[i]);
		else
			this.wrapProperty(mod, i, obj[i]);
	},
	Method: Method,
	wrapMethod: function(mod, name, fn, opts2){
		var opts = this["method_" + name] || {};
		mod[name] = new this.Method({
			name: name,
			method: fn
		}, opts, opts2).wrapper();
	},
	Property: Property,
	wrapProperty: function(mod, name, value){
		new this.Property({
			name: name,
			parent: mod,
			value: value
		});
	},
	method_extend: {
		expand: false,
		execWrapper: function(ctx, args){
			var log = ctx.log || logger();
			var extName = args[0] && args[0].name;
			var groupLabel = "";
			if (extName){
				groupLabel = "var "+ extName + "{?} = "; 
			} else {
				groupLabel = "var "+ ctx.name + "Ext{?} = "; 
			}
			groupLabel += ctx.name+ "{" + ctx.id + "}.extend(...)";
			log.groupc(groupLabel);
			log.trace("where");
			var ret = this.logAndExecMethod(ctx, args);
			log.end();
			return ret;
		}
	},
	method_instantiate: {
		execWrapper: function(ctx, args){
			var log = ctx.log || logger();
			var instanceName = args[0] && args[0].name;
			var groupLabel = "";
			if (instanceName){
				groupLabel = "var " + instanceName + "{" +  ctx.id +  "}" + " = ";
			} else {
				groupLabel = "var " + ctx.name + "{" + ctx.id + "} = "
			}
			groupLabel += "new " + ctx.constructor.name + "{" + ctx.constructor.id + "}(...);";
			log.groupc(groupLabel);
			var ret = this.logAndExecMethod(ctx, args);
			log.end();
			return ret;
		}
	},
	method__config: {
		disable: true
	},
});

var Interim = Mod4.extend({
	name: "Mod7Interim",
	assign: {
		set: set
	},
	_config: function(){
		var arg;
		for (var i = 0; i < arguments.length; i++){
			arg = arguments[i];
			if (is.pojo(arg)){

				// config logger
				if (is.def(arg.log))
					this.log = arg.log;
			}
		}
	},
	set: {
		props: {
			props: function(mod, prop, value){
				console.log("setting props");
			}
		}
	}
}).assign({
	set: set,
	extend: ExtendMfn2.make()
});
set.mfn.wrapMethod(Interim, "extend", Interim.extend);
set.mfn.wrapMethod(Interim, "set", Interim.set);
set.mfn.wrapMethod(Interim.prototype, "set", Interim.prototype.set);

var assign = require("base42/assign");
var track = require("track");

Interim.create_constructor = function(name){
	eval("var " + name + ";");
	var constructor = eval("(" + name + " = function " + name + "(o){\r\n\
	if (!(this instanceof " + name + "))\r\n\
		return new (" + name + ".bind.apply(" + name + ", [null].concat([].slice.call(arguments)) ));\r\n\
	track(this); \r\n\
	this._config && this._config.apply(this, arguments);\r\n\
	this.instantiate.apply(this, arguments);\r\n\
});");
	constructor.assign = assign;
	constructor.prototype.assign = assign;
	return constructor;
};
console.log("Mod7?????");
var Mod7 = Interim.extend({
	name: "Mod7",
	props: {

	},
	instantiate: function(){
		this.set.apply(this, arguments);
		this.initialize();
	},
	initialize: function(){}
});



// Mod4.prototype.set.mfn.wrapMethod(Mod7.prototype, "instantiate", Mod7.prototype.instantiate);
// Mod4.prototype.set.mfn.wrapMethod(Mod7.prototype, "initialize", Mod7.prototype.initialize);

module.exports = Mod7;

log.end();