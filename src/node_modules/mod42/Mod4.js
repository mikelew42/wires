var Mod2 = require("mod42/Mod2");
var is = require("is");
var Method = require("log42/Method");
var Property = require("Property");
var logger = require("log42/logger");

var log = logger(false);

log.group("Mod4.js");
// deactivate everything if mod.log.disabled

var wrap_method = function(mod, name, fn){
	// double wrap?
	if (false){
		wrap_property(mod, name, new Method({
			name: name,
			method: fn
		}).wrapper());
	} else {
		log("wrapping method", name);
		// these constructors need to be extendable somehow
		mod[name] = new Method({
			name: name,
			method: fn
		}).wrapper();
	}
};

var wrap_property = function(mod, name, value){
	// these constructors need to be extendable/variable somehow
	new Property({
		name: name,
		parent: mod,
		value: value
	});
}

var wrap_all = function(obj){
	log.group("wrap_all", obj.name);
	for (var i in obj){
		if (is.fn(obj[i]) && !is.Class(obj[i])){
			if (obj[i].mfn){
				if (!obj.hasOwnProperty(i) || is.Class(obj)) // Mod3.set === Mod2.set, so hasOwn but still needs to be copied...
					obj[i] = obj[i].set(); // acts like "copy"
				
				wrap_mfn(obj[i].mfn);
			}
			wrap_method(obj, i, obj[i]);
		} else {
			wrap_property(obj, i, obj[i]);
		}
	}
	log.end();
};

var wrap_mfn = function(mfn){
	log("wrapping mfn", mfn);
	for (var i in mfn){
		if (is.fn(mfn[i]) && !is.Class(mfn[i]) && i !== "fn"){
			wrap_method(mfn, i, mfn[i]);
		}
	}
}

var Mod4 = Mod2.extend({
	name: "Mod4",
	set: {
		stdProp: function(mod, obj, i){
			if (is.fn(obj[i]) && !is.Class(obj[i]))
				this.wrapMethod(mod, i, obj[i]);
			else
				this.wrapProperty(mod, i, obj[i]);
		},
		Method: Method,
		wrapMethod: function(mod, name, fn, opts2){
			var opts = this["method_" + name] || {};
			mod[name] = new this.Method({
				name: name,
				method: fn.fn || fn,
			}, opts, opts2).wrapper();
		},
		Property: Property,
		wrapProperty: function(mod, name, value){
			new this.Property({
				name: name,
				parent: mod,
				value: value
			});
		},
		// method_extend: {
		// 	execWrapper: function(ctx, args){
		// 		var log = ctx.log || logger();
		// 		var extName = args[0] && args[0].name;
		// 		var groupLabel = "";
		// 		if (extName){
		// 			groupLabel = "var "+ extName + "<?> = "; 
		// 		} else {
		// 			groupLabel = "var "+ ctx.name + "Ext<?> = "; 
		// 		}
		// 		groupLabel += ctx.name+ "<" + ctx.id + ">.extend(";
		// 		log.groupc(groupLabel);
		// 		// log.trace("where");
		// 		var ret = this.method.apply(ctx, args);
		// 		log.end();
		// 		return ret;
		// 	}
		// }
	}
});

wrap_all(Mod4);
Mod4.prototype.set.mfn.wrapMethod(Mod4, "extend", Mod4.extend)
wrap_all(Mod4.prototype);

module.exports = Mod4;

log.end();