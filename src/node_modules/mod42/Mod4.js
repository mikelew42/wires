var Mod1 = require("./Mod1");
var track = require("track");
var is = require("is");

var cloneArray = function(arr, parent, swap, arrName){
	var clone = [];
	var value;


	for (var i = 0; i < arr.length; i++){
		value = arr[i];
		if (value && value.clone && value.parent && value.parent === parent.proto){
			swap.push({
				index: i,
				name: value.name,
				arrName: arrName
			});
		} else {
			clone[i] = arr[i];
		}
	}

	return clone;
}

var Mod4 = module.exports = Mod1.extend({
	name: "Mod4",
	set: {
		stdProp: function(mod, prop, value){
			mod[prop] = value;

			if (value && is.fn(value.setup) && prop !== "parent")
				value.setup(mod, prop);
		}
	},
	instantiate: function(){
		this.protect();
		this.set.apply(this, arguments);
		this.initialize.apply(this, arguments);
	},
	protect: function(){
		var prop, clones = [], swap = [];
		for (var i in this){
			if (["constructor", "base", "proto", "parent"].indexOf(i) > -1)
				continue;
			if (this.hasOwnProperty(i))
				continue;
			prop = this[i];
			if (prop && prop.clone && prop.parent && prop.parent === this.proto){
				this[i] = prop.clone({
					parent: this,
					name: i
				});
				clones.push(i);
			} else if (is.arr(prop)){
				this[i] = cloneArray(prop, this, swap, i);
			}
		}

		// basically, this.something = childMod that gets cloned
		// and, this.arrName[index] === this.something
		// and we need to swap out that index for the new clone...  :/
		for (var i = 0; i < swap.length; i++){
			if (clones.indexOf(swap[i].name) > -1){
				this[swap[i].arrName][swap[i].index] = this[swap[i].name];
			}
		}
	},
	setup: function(parent, name){
		if (!this.parent){
			this.parent = parent;
		}

		if (name && !this.hasOwnProperty("name")){
			this.name = name;
		}
	},
	clone: function(){
		var clone = Object.create(this);
		track(clone);
		clone.proto = this;
		clone.instantiate.apply(clone, arguments);
		return clone;
	}
});