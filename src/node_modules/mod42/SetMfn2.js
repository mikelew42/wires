var Mfn2 = require("mod42/Mfn2");
var is = require("is");
var Method = require("log42/Method");

var Interim = Mfn2.extend({
	set: {
		Method: Method.extend({

		}),
		method_main: {

		}
	}
});

var SetMfn = module.exports = Interim.extend({
	name: "SetMfn2",
	main: function(mod){
		var args = [].slice.call(arguments, 1); // chop off the first arg
		for (var i = 0; i < args.length; i++){
			this.arg(mod, args[i]); // keep mod as first arg
		}
		this.then(mod);
		return mod; // important - see .prop method, where .set() return value is reassigned to parent...
	},
	arg: function(mod, arg){
		if (is.obj(arg))
			this.obj(mod, arg);
		else
			this.other(mod, arg);
	},
	other: function(mod, arg){
		console.warn("not sure how to set this", arg);
	},
	obj: function(mod, obj){
		for (var i in obj){
			this.prop(mod, i, obj[i]);
		}
		return mod;
	},
	// todo: copy if !hasOwn, and then deep extend objects
	// todo: copy arrays if !hasOwn, and do push operations?
	prop: function(mod, prop, value){
		var currentValue = mod[prop];
		if (is.undef(currentValue)){
			this.stdProp(mod, prop, value);
		} else if (is.Class(currentValue)) {
			this.ClassProp(mod, prop, value);
		} else if (currentValue.set) { // dependent on is.def(mod[prop])
			this.propWithSet(mod, prop, value);
		} else if (is.fn(currentValue)) {
			this.fnProp(mod, prop, value);
		} else if (is.obj(currentValue)){
			this.objProp(mod, prop, value); // not yet implemented
		// } else if (is.arr(currentValue)){
		// 	this.arrProp(mod, prop, value); // not yet implemented
		} else {
			this.stdProp(mod, prop, value);
		}
	},
	// "prop with .set"
	propWithSet: function(mod, prop, value){
		if (!mod.hasOwnProperty(prop) && !mod[prop].mfn){
			this.stdProp(mod, prop, Object.create(mod[prop]).set(value));
			// set parent reference?
			// instantiate/initialize/setup(parent)?
		} else {
			// send this through stdProp?
			this.stdProp(mod, prop, mod[prop].set(value));
		}
	},
	ClassProp: function(mod, prop, value){
		if (is.Class(value)){
			this.stdProp(mod, prop, value);
		} else if (mod.hasOwnProperty(prop)) {
			mod[prop].prototype.set(value);
		} else {
			// send this through stdProp?
			mod[prop] = mod[prop].extend(value); // protect mod's prototype
		}
	},
	stdProp: function(mod, prop, value){
		if (mod[prop] !== value)
			mod[prop] = value;
	},
	fnProp: function(mod, prop, value){
		if (is.fn(value)){
			this.stdProp(mod, prop, value);
		} else {
			if (is.arr(value)){
				mod[prop].apply(mod, value);
			} else {
				mod[prop].call(mod, value);
			}
		}
	},
	objProp: function(mod, prop, value){
		if (is.obj(value)){
			if (mod.hasOwnProperty(prop)){
				this.obj(mod[prop], value)
			} else {
				this.stdProp(mod, prop, this.obj(Object.create(mod[prop]), value));
			}
			
		} else {
			console.warn("whoops");
		}
	},
	then: function(){}
});