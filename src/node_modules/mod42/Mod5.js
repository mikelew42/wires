var Base = require("base42");
var Mod1 = require("./Mod1");
var Mod4 = require("./Mod4");
var is = require("is");

// Add AutoMod to Mod4, and use a Settings object to create 

// mod could be a setMfn.fn...
// In that case, it has .set, but not .mfn 
var propWithSet = function(mod, obj, i){
	var modProp = mod[i];
	if (modProp.set.mfn && modProp.set.mfn.contextual){
		modProp.set.mfn.contextual(mod, i, obj[i]);
	} else {
		// this doesn't work with Object.create, since the constructor isn't unique...
			// nobody will have own constructor... 
			// not sure what gives here..
		if (this.hasOwnProperty(constructor))
			this.constructor.base.prototype.propWithSet.call(this, mod, obj, i);
		else
			Mod1.set.mfn.propWithSet.call(this, mod, obj, i);
	}
};

var Settings = Mod1.extend({
	name: "Settings",
	data: function(){
		var skip = [
			"id",
			"constructor",
			"base",
			"proto",
			"data",
			"set",
			"instantiate",
			"initialize",
			"init",
			"assign"
		], data = {};
		for (var i in this){
			if (skip.indexOf(i) === -1){
				data[i] = this[i];
			}
		}
		debugger;
		return data;
	},
	set: {
		// this is a "safe set", and could be used more generally
		contextual: function(parent, name, obj){
			// assume value is an object?
			if (parent.hasOwnProperty(name)){
				parent[name].set(obj);
			} else {
				// maybe run this through parent.set({name: .. }), so it can be wrapped, if its a Mod4
				parent[name] = Object.create(parent[name]).set(obj);
			}
		},
		prop: function(mod, obj, i){
			var modProp = mod[i];
			if (is.undef(modProp) && is.pojo(obj[i])){
				obj[i] = new Settings({ name: i }, obj[i]);
				this.stdProp(mod, obj, i);
			} else {
				this.constructor.base.prototype.prop.call(this, mod, obj, i);
			}
		},
		propWithSet: propWithSet
	}
});

/*
How to auto- Object.create the settings?  Return it from set?
We can return a new value from set...

mod.set({
	settings: {
		pluck: {
	
		}
	}
});
-->

mod.settings.set({})
*/

var Mod5 = Mod4.extend({
	name: "Mod5",
	set: {
		propWithSet: propWithSet
	}
});

Mod5.Settings = Settings;

module.exports = Mod5;