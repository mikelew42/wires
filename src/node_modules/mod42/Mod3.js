var Mod2 = require("mod42/Mod2");
var is = require("is");
var Method = require("log42/Method");

var wrap_method = function(mod, name, fn){
	mod[name] = new Method({
		name: name,
		method: fn
	}).wrapper();
};

var wrap_all = function(obj){
	for (var i in obj){
		if (is.fn(obj[i]) && !is.Class(obj[i])){
			if (obj[i].mfn){
				if (!obj.hasOwnProperty(i) || is.Class(obj)) // Mod3.set === Mod2.set, so hasOwn but still needs to be copied...
					obj[i] = obj[i].set(); // acts like "copy"
				
				wrap_mfn(obj[i].mfn);
			}
			wrap_method(obj, i, obj[i]);
		}
	}
};

var wrap_mfn = function(mfn){
	for (var i in mfn){
		if (is.fn(mfn[i]) && !is.Class(mfn[i]) && i !== "fn"){
			wrap_method(mfn, i, mfn[i]);
		}
	}
}

var Mod3 = Mod2.extend({
	name: "Mod3",
	set: {
		stdProp: function(mod, obj, i){
			if (is.fn(obj[i]) && !is.Class(obj[i]))
				wrap_method(mod, i, obj[i]);
			else
				mod[i] = obj[i];
		}
	}
});

wrap_all(Mod3);
wrap_all(Mod3.prototype);

module.exports = Mod3;