var TestFramework = require("test/framework");
var test = TestFramework.test;
var is = require("is");
var $ = require("jquery");
var assert = console.assert.bind(console);

var Mod = require("mod42");
var Mod1 = require("mod42/Mod1");
var Mod2 = require("mod42/Mod2");
var Mod3 = require("mod42/Mod3");
var Mod4 = require("mod42/Mod4");

$(function(){

test("mod42", function(){
	test("basic", function(){
		var mod = Mod();
		assert(mod instanceof Mod);
		assert(mod.constructor === Mod);
	});

	test("instantiate overriding", function(){
		var mod = Mod({
			instantiate: function(){
				// should not run... instantiate cannot be overridden per instance
				assert(false);
			}
		});

		var check = {};

		var Mod2 = Mod.extend({
			instantiate: function(){
				check.instantiate = true;
			}
		});

		var mod2 = Mod2();

		assert(check.instantiate === true);
	});

	test("Mod1", function(){

		test("basic", function(){
			var mod = Mod1();
			assert(mod instanceof Mod1);
			assert(mod.constructor === Mod1);
		});

		test("create, assign, init", function(){
			var check = {},
				mod = Mod1({
					init: function(){
						check.init = true;
					}
				});

			assert(check.init);
		});

		test("extend", function(){

			test("one", function(){
				var Mod2 = Mod1.extend();

				assert(Mod2.base === Mod1);

				var mod2 = Mod2();
				assert(mod2 instanceof Mod2);
				assert(mod2 instanceof Mod1);
			});

			test("two", function(){
				var check = {},
					Mod2 = Mod1.extend({
						name: "Mod2",
						prop: 123,
						init: function(){
							check.init = true;
						}
					}, {
						prop: 456
					});

				assert(Mod2.name === "Mod2");
				assert(!check.init);
				assert(Mod2.prototype.prop === 456);

				var mod2 = new Mod2({
					prop: 678
				});

				assert(mod2.name === "mod2");
				assert(check.init);
				assert(mod2.prop === 678);
				assert(mod2.proto.prop === 456);
				assert(!mod2.base.prop);

				var Mod3 = Mod2.extend({
					prop: 789
				});
				var mod3 = new Mod3({
					prop: 234
				});

				assert(mod3.prop === 234);
				assert(mod3.proto.prop === 789);
				assert(mod3.base.prop === 456);
			});

			test("three", function(){
				var check = {},
					Mod2 = Mod1.extend({
						set: {
							main: function(){
								check.set = true;
							}
						}
					});

				assert(!check.set);
				Mod2.prototype.set();
				assert(check.set);
				assert(Mod2.prototype.set !== Mod1.prototype.set);
			});

			test("set", function(){

			});
		});
	});

	test("Mod2", function(){
		var mod = Mod2({
			log: false
		});

		mod.log = true;

		mod.log("hello");
		mod.log.info("info");
		mod.log.debug("debug");
		mod.log.warn("warn");
		mod.log.error("error");
		mod.log.group("group");
		mod.log.log("log.log");
		mod.log.end();

		mod.log = false;
		mod.log.warn("this should not be");
		
		var Mod3 = Mod2.extend();
		var mod3 = Mod3();

		mod3.log("this should be on");

		var Mod4 = Mod2.extend({
			log: false,
			method: function(){
				this.log.error("oh shit");
				this.log = true;
				this.log("ok, we're good");
			}
		});

		var mod4 = Mod4();
		mod4.method();

	});

	test("Mod3", function(){
		var mod = Mod3({
			init: function(){
				this.wrapMe();
			},
			wrapMe: function(){
				this.log("inside wrapMe");
			}
		});

		mod.wrapMe();
	});

	test("Mod4", function(){
		var mod = Mod4({
			test1: 1,
			test2: true,
			test3: "three"
		});
	});
});

});