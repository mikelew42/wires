var is = require("is");
var Base = require("base42");

var Mfn = Base.extend({
	name: "Mfn",
	init: function(){
		var self = this;
		this.name = this.constructor.name[0].toLowerCase() + this.constructor.name.substring(1);
		this.fn = function(){
			return self.main.apply(self, [this].concat([].slice.call(arguments)));
		};
		this.fn.mfn = this;
		this.fn.set = function(o){
			// can we use Object.create instead?
			var NewMfn = this.mfn.constructor.extend.call(this.mfn.constructor, {name: this.mfn.constructor.name}, o);
			return new NewMfn().fn;
		};
	},
	main: function(ctx){}
}).assign({
	make: function(){
		var NewMfn = this.extend.apply(this, [{name: this.name}].concat( [].slice.call(arguments)) );
		return NewMfn().fn;
	}
});

module.exports = Mfn;

/*
Regarding .make():
Due to the way we're using .set to copy the .fn via the constructor, we need to keep all modifications on the Mfn prototypes, not on mfn instances. 
*/