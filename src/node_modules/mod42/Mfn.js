var Base = require("base42");
var is = require("is");
var track = require("track");
var logger = require("log42/logger");
var log = logger(false);

log.groupc("Mfn.js");

var Mfn = Base.extend({
	name: "Mfn",
	init: function(){
		var self = this;

		logger.install(this, false);

		this.name = this.constructor.name[0].toLowerCase() + this.constructor.name.substring(1);

		this.fn = function(){
			self.useLogger(this);
			var ret = self.main.apply(self, [this].concat([].slice.call(arguments)));
			self.restoreLogger(this);
			return ret;
		};

		this.fn.mfn = this;

		this.fn.set = function(o){
			return this.mfn.clone.apply(this.mfn, arguments).fn;
		};
	},
	useLogger: function(ctx){
		if (ctx.log){
			this._last = this.log.enabled;
			this.log = ctx.log.enabled;
		}
	},
	restoreLogger: function(ctx){
		// only restore if we adopted ctx logger's state
		if (is.def(this._last)){
			this.log = this._last;
			delete this._last; // return to undefined
		}
	},
	clone: function(){
		var clone = Object.create(this);
		track(clone);
		clone.instantiate.apply(clone, arguments);
		return clone;
	},
	main: function(ctx){}
}).assign({
	make: function(o){
		return new this(o).fn;
	}
});

module.exports = Mfn;

log.end();