var Base = require("base42");
var SetMfn2 = require("./SetMfn2");
var ExtendMfn2 = require("./ExtendMfn2");
var Mod4 = require("./Mod4");
var logger = require("log42/logger");
var is = require("is");

var Method = require("log42/Method");
var Property = require("Property");

var log = logger();

log.groupc("Mod8.js");

log.group("var set = SetMfn2.make(...)");
var set = SetMfn2.make({
	stdProp: function(mod, prop, value){
		if (is.fn(value) && !is.Class(value))
			this.wrapMethod(mod, prop, value);
		else
			// this.wrapProperty(mod, prop, value);
		mod[prop] = value;
	},
	Method: Method,
	wrapMethod: function(mod, name, fn, opts2){
		var opts = this["method_" + name];
		if (opts === false){
			mod[name] = fn.fn || fn;
		} else {
			opts = opts || {};
			mod[name] = new this.Method({
				name: name,
				method: fn.fn || fn,
			}, opts, opts2).wrapper();
		}

	},
	Property: Property,
	wrapProperty: function(mod, name, value){
		new this.Property({
			name: name,
			parent: mod,
			value: value
		});
	},
	method__config: false
});
log.end();

log.group("var Interim = Base.extend(...)");
var Interim = Base.extend({
	name: "Mod8Interim",
	set: set
}).assign({
	extend: ExtendMfn2.make(),
	set: set
}).set({
	log: false
});

set.mfn.wrapMethod(Interim.prototype, "set", Interim.prototype.set);
set.mfn.wrapMethod(Interim, "set", Interim.set);
set.mfn.wrapMethod(Interim, "extend", Interim.extend);
log.end();

log.group("var Mod8 = Interim.extend(...)");
var Mod8 = module.exports = Interim.extend({
	name: "Mod8",
	log: false,
	_config: function(o){
		if (o && o.log){
			this.log = o.log;
			delete o.log;
		}
	},
	instantiate: function(){
		this.set.apply(this, arguments);
		this.initialize.apply(this, arguments);
	},
	initialize: function(){
		this.init();
	},
	init: function(){}
});
log.end();
log.end();