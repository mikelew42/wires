var Mfn = require("mod42/Mfn");
var is = require("is");

var SetMfn = module.exports = Mfn.extend({
	name: "SetMfn",
	main: function(mod){
		var args = [].slice.call(arguments, 1); // chop off the first arg
		for (var i = 0; i < args.length; i++){
			this.arg(mod, args[i]); // keep mod as first arg
		}
		return mod; // important - see .prop method, where .set() return value is reassigned to parent...
	},
	arg: function(mod, arg){
		if (is.obj(arg))
			this.obj(mod, arg);
		else if (is.str(arg) && this.str)
			this.str(mod, arg);
		else if (is.num(arg) && this.num)
			this.num(mod, arg);
		else if (is.bool(arg) && this.bool)
			this.bool(mod, arg);
		else if (is.undef(arg) && this.undef)
			this.undef(mod, arg);
		else if (is.fn(arg) && this.setFn)
			this.setFn(mod, arg); // .fn is taken..
		else if (this.other)
			this.other(mod, arg);
		else
			console.warn("not sure how to set this", arg);
	},
	obj: function(mod, obj){
		for (var i in obj){
			this.prop(mod, obj, i);
		}
	},
	// todo: copy if !hasOwn, and then deep extend objects
	// todo: copy arrays if !hasOwn, and do push operations?
	prop: function(mod, obj, i){
		if (is.undef(mod[i])){
			this.stdProp(mod, obj, i);
		} else if (is.Class(mod[i])) {
			this.ClassProp(mod, obj, i);
		} else if (mod[i].set) { // dependent on is.def(mod[i])
			this.propWithSet(mod, obj, i);
		} else if (is.fn(mod[i])) {
			this.fnProp(mod, obj, i);
		} else if (is.obj(mod[i])){
			this.objProp(mod, obj, i);
		} else if (is.arr(mod[i])){
			this.arrProp(mod, obj, i);
		} else {
			this.stdProp(mod, obj, i);
		}
	},
	// "prop with .set"
	propWithSet: function(mod, obj, i){
		if (mod[i].copy){
			mod[i] = mod[i].copy(obj[i]);
		} else {
			// if (!mod.hasOwnProperty[i])
			// 	console.warn("potentially unsafe modification of prototype chain");
			mod[i] = mod[i].set(obj[i]);
		}
	},
	ClassProp: function(mod, obj, i){
		if (is.Class(obj[i])){
			this.stdProp(mod, obj, i);
		} else if (mod.hasOwnProperty(i)) {
			mod[i].prototype.set(obj[i]);
		} else {
			mod[i] = mod[i].extend(obj[i]); // protect mod's prototype
		}
	},
	stdProp: function(mod, obj, i){
		mod[i] = obj[i];
	},
	fnProp: function(mod, obj, i){
		if (is.fn(obj[i])){
			this.stdProp(mod, obj, i);
		} else {
			if (is.arr(obj[i])){
				mod[i].apply(mod, obj[i]);
			} else {
				mod[i].call(mod, obj[i]);
			}
		}
	}
});