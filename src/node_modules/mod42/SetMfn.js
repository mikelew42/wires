var Mfn = require("mod42/Mfn");
var ExtendMfn = require("mod42/ExtendMfn");
var is = require("is");
var logger = require("log42");

var log = logger();

log.groupc("SetMfn.js");

var SetMfn = module.exports = Mfn.extend({
	name: "SetMfn",
	instantiate: function(){
		if (this.set)
			this.set.apply(this, arguments);
		else
			this.assign.apply(this, arguments);
		this.init();
	},
	main: function(mod){
		for (var i = 1; i < arguments.length; i++){
			this.arg(mod, arguments[i]); // keep mod as first arg
		}
		this.then(mod);
		return mod; // important
	},
	arg: function(mod, arg){
		if (is.pojo(arg))
			this.obj(mod, arg);
		else
			this.other(mod, arg);
	},
	other: function(mod, arg){
		if (is.def(arg))
			console.warn("not sure how to set this", arg);
	},
	obj: function(mod, obj){
		for (var i in obj){
			this.prop(mod, i, obj[i]);
		}
		return mod; // used in .objProp()
	},
	props: {
		log: function(mod, prop, value){
			logger.install(mod, value);
		}
	},
	prop: function(mod, prop, value){
		this.log.group(prop, this.log.inline(value));

		var currentValue = mod[prop];

		// coordinate this with the mod.props...
		if (this.props[prop]){
			this.props[prop].call(this, mod, prop, value);

		} else if (is.undef(currentValue)){
			this.stdProp(mod, prop, value);

		} else if (is.Class(currentValue)) {
			this.ClassProp(mod, prop, value);

		} else if (currentValue.set) { // dependent on is.def(mod[prop])
			this.propWithSet(mod, prop, value);

		} else if (is.fn(currentValue)) {
			this.fnProp(mod, prop, value);

		} else if (is.obj(currentValue)){
			this.objProp(mod, prop, value);

		} else {
			this.stdProp(mod, prop, value);
		}

		this.log.end();
	},
	propWithSet: function(mod, prop, value){
		if (!mod.hasOwnProperty(prop) && !mod[prop].mfn){
			this.stdProp(mod, prop, Object.create(mod[prop]).set(value));
		} else {
			this.stdProp(mod, prop, mod[prop].set(value));
		}
	},
	ClassProp: function(mod, prop, value){
		if (is.Class(value)){
			this.stdProp(mod, prop, value);
		} else if (mod.hasOwnProperty(prop)) {
			mod[prop].prototype.set(value);
		} else {
			mod[prop] = mod[prop].extend(value); // protect mod's prototype
		}
	},
	stdProp: function(mod, prop, value){
		mod[prop] = value;
	},
	fnProp: function(mod, prop, value){
		if (is.fn(value)){
			this.stdProp(mod, prop, value);
		} else {
			if (is.arr(value))
				mod[prop].apply(mod, value);
			else
				mod[prop].call(mod, value);
		}
	},
	objProp: function(mod, prop, value){
		if (is.obj(value)){
			if (mod.hasOwnProperty(prop))
				this.obj(mod[prop], value)
			else
				this.stdProp(mod, prop, this.obj(Object.create(mod[prop]), value));
		} else {
			console.warn("whoops");
		}
	},
	then: function(){}
}).assign({
	extend: ExtendMfn.make()
});

var set = SetMfn.make();

SetMfn.set = set;
SetMfn.prototype.set = set;

log.end();