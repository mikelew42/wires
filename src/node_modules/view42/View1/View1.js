var Mod4 = require("mod42/Mod4");
var is = require("is");
var $ = require("jquery");

var ViewCaptor = require("view42/ViewCaptor");

jQuery = $;

var Enabler = Mod4.extend({
	name: "Enabler",
	enabled: true,
	disabled: false,
	enable: function(value){
		if (value === false){
			this.enabled = false;
			this.disabled = true;
		} else {
			this.enabled = true;
			this.disabled = false;
		}
	},
	disable: function(value){
		if (value === false){
			this.disabled = false;
			this.enabled = true;
		} else {
			this.disabled = true;
			this.enabled = false;
		}
	}
});

var View1 = module.exports = Enabler.extend({
	name: "View1",
	tag: "div",
	captive: true,
	captor: true,
	autoClone: true,
	set: {
		other: function(view, value){
			view.addContent(value);
		}
	},
	instantiate: function(o){
		this.inst_el(o);
		Mod4.prototype.instantiate.apply(this, arguments);
	},
	inst_el: function(o){
		if (o && o.tag){
			this.tag = o.tag;
			delete o.tag;
		}

		this.$el = $("<" + this.tag + ">").addClass(this.$el.attr("class")).attr("style", this.$el.attr("style"));
	},
	init: function(){
		this.render(); // forcing the user to call render manually is probably a good idea...
			// that way, they have to choose whether to put their code before or after render, and not forget how it works
	},
	addContent: function(value){
		if (!is.def(this.content)){
			this.content = value;
		} else if (is.arr(this.content)) {
			this.content.push(value);
		} else {
			// is defined, but not an array
			this.content = [this.content, value];
		}
	},
	// render() is also used to re-capture
	render: function(){
		if (this.enabled){
			// set to false to skip
			this.captive && this.getCaptured();

			if (!this.hasOwnProperty("isRendered") || !this.isRendered){
				this.renderContent();
				this.behaviors();
				this.rendered();
				this.isRendered = true;
			}
		}
	},
	// override points
	behaviors: function(){},
	rendered: function(){},
	rerender: function(){
		this.isRendered = false;
		this.render();
	},
	renderContent: function(){
		if (!is.def(this.content)){
			return false;
		} else if (is.arr(this.content)){
			for (var i = 0; i < this.content.length; i++){
				this.capture(this.content[i]);
			}
		} else {
			this.capture(this.content);
		}
	},
	capture: function(value){
		if (!is.def(value)){
			return false;
		} else if (is.fn(value)){
			this.captureFn(value);
		} else if (is.obj(value)){
			if (is.fn(value.render)){
				this.captureFn(value.render, value);
			}
		} else if (is.arr(value)){
			for (var i = 0; i < value.length; i++)
				this.capture(value[i]);
		} else {
			this.append(value); // DOM, view
		}
	},
	captureFn: function(fn, ctx){
		var ret;
		this.captor && this.becomeCaptor();
		ret = fn.call(ctx || this, this); // allow fn to bind to something else, and then use the first arg as the reference to the view
		this.captor && this.restoreCaptor();

		if (is.def(ret)){
			this.renderValue(ret);
		}
	},
	becomeCaptor: function(){
		if (this.captor){
			this.previousCaptor = ViewCaptor.captor;
			ViewCaptor.captor = this;
		}
	},
	restoreCaptor: function(){
		if (this.captor){
			ViewCaptor.captor = this.previousCaptor;
		}
	},
	getCaptured: function(){
		if (this.captive && ViewCaptor.captor){
			ViewCaptor.captor.add(this);
		}
	},
	// these come from within captured fns
	add: function(view){
		if (!this[view.name])
			this[view.name] = view;

		if (view.setup)
			view.setup(this);

		// this is all that really needs to happen
		view.$el.appendTo(this.$el);
	},
	// a jQuery filler text plugin
	filler: function(quantity){
		this.attr("data-lorem", quantity);
	}
}).set({
	extend: {
		instantiate_prototype: function(NewView, OldView){
			// protect prototype chain
			NewView.prototype.inst_el();
		}
	}
});

View1.prototype.$el = $("<div>");


/*   Forward jQuery fns to view.$el   */
// this just maps view.whatever() to view.$el.whatever(), so you can view.hide(), or view.show(), etc...
// if we view.append(anotherView), we need to pass anotherView.$el
// I think a rather simple check for .$el should work... 
var aliasFnToEl = function(fn){
	return function(view){
		var ret;
		// if we .. append(view), we really need to append(view.$el)
		if (view && view.$el)
			ret = this.$el[fn].call(this.$el, o.$el);
		// otherwise, just pass all arguments along, untouched
		else 
			ret = this.$el[fn].apply(this.$el, arguments);
		
		if (ret === this.$el){
			// return the view, not the $el, for chaining
			return this;
		} else {
			return ret;
		}
	};
};

// I've been adding as needed - not an exhaustive list
[	'append', 'prepend', 'click', 'show', 'hide', 'appendTo', 'prependTo', 'addClass', 'removeClass', 
	'css', 'attr', 'remove', 'empty', 'hasClass', 'html', "text", "slideDown", "slideUp", "fadeIn", "fadeOut", "animate", "slideToggle", "fadeToggle", "toggle"].forEach(function(v){
		View1.prototype[v] = aliasFnToEl(v);
});



/*  Create some standard elements, put them on the View constructor, and on the prototype  */
var Element;
["p", "h1", "h2", "h3", "button", "section"].forEach(function(v){
	Element = View1.extend({
		name: v,
		tag: v
	});

	View1[v] = Element;

	View1.prototype[v] = Element;
});