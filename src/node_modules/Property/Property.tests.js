var TestFramework = require("../test/framework");
var test = TestFramework.test;
var assert = console.assert.bind(console);
var is = require("../is");
var $ = require("jquery");
var Base3 = require("Base3");

var Property = require("Property");
var Mod1 = require("mod42/Mod1");

/*
Dual purpose function:
 - prop("name") --> if it has already been upgraded, return the cached property object.  If it hasn't been upgraded, upgrade it and return the new property object.
 - prop("name1", "name2", "name3"...) --> upgrade all.  Returning "last" isn't really as important, that's just how I managed to handle the case when you're just passing in one.
*/
var Module = Mod1.extend({
	prop: function(){
		var name, last;

		for (var i = 0; i < arguments.length; i++){
			name = arguments[i];
			if (this.props && this.props[name]){
				last = this.props[name];
			} else {
				last = new Property({
					name: name,
					parent: this,
					value: this[name]
				});
			}
		}

		return last; 
	}
});

$(function(){

test("Property", function(){

	test("basic", function(){
		var mod = Module({
			name: "mod",
			prop: "test"
		});
		assert(mod.test === undefined);
		mod.test = 5;
		assert(mod.test === 5);
		
	});

	test("extend", function(){
		var Mod2 = Module.extend({
			name: "Mod2",
			prop: "test",
			test: 5
		});

		console.log("create mod");
		var mod = Mod2({
			name: "mod"
		});

		console.log("assert mod.test === 5");
		assert(mod.test === 5);
		assert(mod.hasOwnProperty("test") === false);

		console.log("Mod3 extends Mod2");
		var Mod3 = Mod2.extend({
			name: "Mod3",
			test: 10
		});

		console.log(mod.test);
		assert(mod.test === 5);

		console.log("create mod2");
		var mod2 = Mod3({
			name: "mod2"
		});

		console.log("assert mod2.test === 10");
		assert(mod2.test === 10);
	});
});

});